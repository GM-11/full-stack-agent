Metadata-Version: 2.2
Name: full-stack-agent
Version: 0.2.0
Summary: A CLI tool for initializing full-stack projects with best practices
Home-page: https://github.com/GM-11/full-stack-agent
Author: Gopal Mathur
Author-email: mathurgopal1001@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: langchain-groq
Requires-Dist: langchain
Requires-Dist: langchain-community
Requires-Dist: inquirer
Requires-Dist: python-dotenv
Requires-Dist: tavily-python
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Full Stack Agent

An interactive command-line tool that streamlines the process of setting up new web applications and API services with modern tech stacks. It automatically generates and executes initialization scripts based on your chosen technologies and system requirements.

## Features ‚ú®

- Interactive project setup wizard
- Support for multiple project types:
  - Web Applications
  - API Services
- Comprehensive tech stack selection
- Real-time system requirement checks
- Automated script generation
- Cross-platform support (Windows, MacOS, Linux)
- Latest best practices integration through Tavily Search
- Smart error handling and validation

## Prerequisites üìã

Before using the Project Initializer, ensure you have:

1. Python 3.7 or higher installed
2. Required API keys:
   - GROQ_API_KEY
   - TAVILY_API_KEY

## Installation üîß

Install directly from PyPI:

```bash
pip install full-stack-agent
```

## Configuration ‚öôÔ∏è

Before first use, set up your API keys:

1. Export as environment variables:
```bash
export GROQ_API_KEY=your_groq_api_key
export TAVILY_API_KEY=your_tavily_api_key
```

OR

2. Create a `.env` file in your working directory:
```
GROQ_API_KEY=your_groq_api_key
TAVILY_API_KEY=your_tavily_api_key
```

## Usage üíª

Simply run:
```bash
full-stack-agent
```

Follow the interactive prompts to:
1. Enter your project name
2. Select your operating system
3. Choose project type
4. Select desired tech stack
5. Configure additional features

The tool will automatically:
- Verify system requirements
- Generate appropriate initialization scripts
- Execute the scripts to set up your project

## Supported Technologies üõ†Ô∏è

### Web Applications
- Frontend:
  - React
  - Vue
  - Angular
  - Svelte
- Backend:
  - Node.js/Express
  - Python3/Flask
  - Python3/Django
  - Python3/FastAPI
- Databases:
  - MongoDB
  - PostgreSQL
  - MySQL
  - SQLite
- Additional Tools:
  - Docker
  - TypeScript
  - Redux
  - GraphQL

### API Services
- Backend:
  - Node.js/Express
  - Python3/FastAPI
  - Python3/Django REST
  - Go/Gin
- Databases:
  - MongoDB
  - PostgreSQL
  - MySQL
  - Redis
- Features:
  - Authentication
  - Swagger/OpenAPI
  - Rate Limiting
  - Caching

## Error Handling üîç

The tool includes comprehensive error handling for:
- Missing system requirements
- Invalid configurations
- Script execution failures
- API communication issues

## Troubleshooting üîß

### Common Issues:

1. **Missing Requirements**
   - Ensure all required tools are installed for your chosen tech stack
   - Verify API keys are properly set in environment or `.env` file

2. **Script Execution Failures**
   - Check system permissions
   - Verify network connectivity for package downloads
   - Ensure no conflicting processes are running

3. **API Related Issues**
   - Verify API key validity
   - Check network connectivity
   - Ensure API service status

## Contributing ü§ù

Contributions are welcome! Please feel free to submit a Pull Request.
